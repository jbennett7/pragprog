Chapter 8  Task C: Catalog Display

Our next task is to create a simple catalog display.

8.1 Iteration C1: Creating the Catalog Listing
  The products controller is used by the sellers.  Now lets create a second controller for the paying customers:
  
    rails generate controller Store index

  Then what we should do is make it simple for people to find our site by rerouting the root URL to this site, by changing the config/routes.rb file:

    root 'store#index', as: 'store'

  Let's expose the list of products to our view.  In app/controllers/store_controller.rb:

    class StoreController < ApplicationController
      def index
->      @products = Product.order(:title)
      end
    end
  
  Now we want to list the products in alphabetical order.  To do this add an order(:title) call to the Product model.

  Now we write out our view template.  This is done in the app/views/store/index.html.erb file.  Remember that the path name to view is built from the name of the controller [store] and the name of the action [index].  The .html.erb part signifies an ERB template that produces an HTML result.

  We use the sanitize() method for the description to allow us to safely add HTML stylings to make the descriptions more interesting for our customers.

  The image_tag() helper method is used to generate HTML <img> tags using its argument as the image source.

  Next we add the stylesheet, making use of the fact that in Iteration A2 we set things up so that pages created by the StoreController will define an HTML class by the name of store.

8.2 Iteration C2: Adding a Page Layout
  First we modify app/views/layouts/application.html.erb to define a banner and sidebar.

  The stylesheet_link_tag() helper method is used to generate a <link> tag to our application's stylesheet and specifies an option to enable turbolinks (https://github.com/rails/turbolinks), which transparently works behind the scenes to speed up page changes within the application. 

    <%= stylesheet_link_tag  "application", media: "all", "data-turbolinkes-track" => true %>

  This line generates a <link> to our application's scripts.

    <%= javascript_include_tag "application", "data-turbolinks-track" => true %>

  This line sets up all the behind-the-scenes data needed to prevent cross-site request forgery attacks, which will be important once we add forms.

    <%= csrf_meta_tags %>

  This line sets up the page heading to the value in the instance variable @page_title.  The real magic, however, takes place a little later, when we invoke <%= yield %>.  Rails then automatically substitutes in the page-specific content - the stuff generated by th eview invoked by this request.  Here, this will be the catalog page generated by index.html.erb

    <%= @page_title || "Pragmatic Bookshelf" %>

  To make this all work, first rename the file app/assets/stylesheets/applicaiton.css to application.css.scss, and edit it.  This file will automatically include all stylesheets available in this directory and in any subdirectory.  This is accomplished via the require_tree directive.

  This page design consists of three primary areas on the screen: a anner across the top, a main area on the bottom right, and a side area on the left.  Each of these has margins, padding, fonts, and colors - typical things you see in CSS.  The banner is also centered and specifies that the image is to be placed on the left.

  Again, we make heavy use of Sass, which is exactly what the file rename enabled us to do.  For example, there is an img selector nested inside the #banner selector.  There also is a selector inside of the #side selector.

8.3  Iteration C3: Using a Helper to Format the Price

  The function sprintf() is provided by Ruby to format strings including prices.  However it would be better in a view (app/views/store/index.html.erb) to use a helper method "number_to_currency()" since this will avoid embedding knowledge of currency formatting into the view:

    <span class="price"><%= number_to_currency(product.price) %></span>

8.4 Iteration C4: Functional Testing of Controllers

  We need to add some unit testing to our new model.  The four lines that we add take a look into the HTML that is reutrned, using CSS selector notation.  Selectors that start with a number sign (#) match on id attributes, selectors that start with a dot (.) match on class attributes, and selectors that contain no prefix at all match on element names.

8.5 Iteration C5: Caching of Partial Results

  To turn on caching in config/environments/development.rb:

    config.action_vontroller.perform_caching = true

  Next we need to know what needs to be re-rendered if things change.  This means adding a code to app/models/product.rb

    def self.latest
      Product.order(:updated_at).last
    end

  Next we mark the sections of our template that we need to update if any product changes, and inside that seciton we mark the subsection that we need in order to update any specific product that changed.  This is done in the app/views/store/index.html.erb file.

Next we need to do the Playtime stuff specifically:

  * Add a date and time to the sidebar.  It doesn't have to update; just show the value at the time the page was displayed.
  * Experiment with setting various number_to_currency helper method options, and see the effect on your catalog listing.
  * Write some functioanl tests for the product maintenance application using assert_select.  The tests will need to be placed into the test/controllers/products_controller_test.r file.
  * Just a reminder - git save your work.

  hints can be found at http://www.pragprog.com/wikis/wiki/RailsPlayTime
