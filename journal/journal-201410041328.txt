Summary of Task A and the state of the depot app.

In the previous journal we completed the first two iterations or Task A, Creating the Application.  This task included:
  * Creating the development database.
  * Using migration to create and modify the schema
  * Created the products table and used the scaffold generator to write an application to maintain it.
  * Updated an application-wide layout as well as a controller-specific view in order to show a list of products.

During playtime we experimented with the migration commands:
  * rake db:rollback       - to rollback the latest migration
  * rake db:migrate        - to apply the latest migration
  * rake db:migrate:status - to view the status of a migration

During playtime we also created a git repository for the application.  We did not however, import it to github.com.


Today's Work:

#BEGIN http://guides.rubyonrails.org/getting_started.html#configuring-a-database
NOTE: This guide is not useful.
1. Guide Assumptions
  * Prerequisites:
    - Ruby 1.9.3 or newer
    - RubyGems packaging system.
    - SQLite3 database

  Rails is a web application framework running on the Ruby programming language.  If you have no
  prior experience with Ruby, you will find a very steep learning curve diving straight into Rails.
  There are several curated lists of online resources for learning Ruby:
    * Official Ruby Programming Language website
    * reSRC's List of Free Programming Books

2. What is Rails?
  Rails is a web application development framework written in the Ruby language.  It is designed to make programming web applications easier by making assumptions about what every developer needs to get started.  It allows you to write less code while accomplishing more than many other languages and frameworks.  Experienced Rails developers also report that it makes web application development more fun.

  Rails makes assumptions that there is the "best" way to do things.

  Rails philosophy:
    * Don't Repeat Yourself: DRY is a principle of software development which states that "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system."  By not writing the same information over and over again, our code is more maintainable, more extensible, and less buggy.
    * Convention Over Configuration: Rails has opinions about the best way to do many things in a web application, and defaults to this set of conventions, rahter than require that you specify every minutiate through endless configuration files.

#END http://guides.rubyonrails.org/getting_started.html#configuring-a-database

#BEGIN http://guides.rubyonrails.org/active_record_basics.html
1. What is Active Record?
  Active Record is the M in MVC - the model - which is the layer of the system responsible for representing business data and logic.  Active Record facilitates the creation and use of business objects whose data requires persistent storage to a database.  It is an implementation of the Active Record pattern which itself is a description of an Object Relational Mapping system.

1.1 The Active Record Pattern
  In Active Record, objects carry both persistent data and behavior which operates on that data.  Active Record takes the opinion that ensuring data access logic is part of the object will educate uses of that object on how to write to and read from the database.

1.2 Object Relational Mapping
  Object-Relational Mapping, commonly referred to as its abbreviation ORM, is a technique that connects the rich objects of an application to tables in a relational database management system.  Using ORM, the properties and relationships of the objects in an application can be easily stored and retrieved from a database without writing SQL statements directly and with less overall database access code.

  1.3 Active Record as an ORM Framework
    Active Record gives us several mechanisms, the most important being the ability to:
      * Represent models and their data.
      * Represent associations between these models.
      * Represent inheritance hierarchies through related models.
      * Validate models before they get persisted to the database.
      * Perform database operations in an object-oriented fashion.

2. Convention over Configuration in Active Record

2.1 Naming Conventions
  By default, Active Record uses some naming conventions to find out how the mapping between models and database tables should be created.  Rails will pluralize your class names to find the respective database table.  So, for a class Book, you should have a database table called books.  The Rails pluralization mechanisms are very powerful, being capable to pluralize (and singularize) both regular and irregular words.  When using class names composed of two or more words, the model class name should follow the Ruby conventions, using the CamelCase form, while the table name must contain the workds seperated by underscores (Snake case).  Examples:
  *  Database Table - Plural with underscores separating words (e.g., book_clubs).
  *  Model Class - Singular with the first letter of each word capitalized (e.g. BookClud).

2.2 Schema Conventions
  Active Record uses naming conventions for the columns in database tables, depending on the purpose of these columns.
  *  Foreign keys - These fields should be named following the pattern, singularized_table_name_id (e.g. item_id, order_id).  These are the fields that Active Record will look for when you create associations between your models.
  *  Primary keys - By default, Active Record will use an integer column name id as the table's primary key.  When using Active Record Migrations to crate your tables, this column will be automatically created.

These are the optional column names that will add additional features to Active Record instances:
  * created_at - Automatically gets set to the current date and time when the record is first created.
  * updated_at - Automatically gets set to the current date and time whenever the record is updated.
  * lock_version - Adds optimistic locking to a model.
  * type - Specifies that the model uses Single Table Inheritance.
  * (association_name)_type - Stores the type for polymorphic associations
  * (table_name)_count - Used to cache the number of belonging objects on associations.

  For example, a comments_count column in a Post class that has many instances of Comment will cache the number of existent comments for each post.

  While these column names are optional, they are in fact reserved by Active Record.  Steer clear of reserved keywords unless you want the extra functionaility.  For example, type is a reserved keyword used to designate a table using Single Table Inheritance (STI).  If you are not using STI, try an analogous keyword like "context", that may still accurately describe the data you are modeling.

3. Creating Active Record Models
  It is very easy to create ActiveRecord models.

    class Product < ActiveRecord:: Base
    end
  
  This will create a Product model, mapped to a products table at the database.  By doing this you'll also have the ability to map the columns of each row in that table with the attributes of the instances of your model.  Suppose that the products table was created using a SQL sentence like:

    CREATE TABLE products (
      id int(11) NOT NULL auto_increment,
      name varchar(255),
      PRIMARY KEY (id)
    );

  Following the table schema above, you would be able to write code like the following:

    p = Product.new
    p.name = "Some Book"
    puts p.name # "Some Book"

4. Overriding the Naming Conventions
  What if you need to follow a different naming convention or need to use your Rails applicaiton with a legacy database?  No problem, you can easily override the default conveintions.

  You can use the ActiveRecord::Base.table_name= method to specify the table name that should be used:

    class Product < ActiveRecord::Base
      self.table_name = "PRODUCT"
    end

  If you do so, you will have to define manually the class name that is hosting the fixtures (class_name.yml) using the set_fixture_class method in your test definition:

    class FunnyJoke < ActiveSupport::TestCase
      set_fixture_class funny_jokes: Joke
      fixtures :funny_jokes
      ...
    end

  It's also possible to override the column that should be used as the table's primary key using the ActiveRecord::Base.primary_key= method:

    class Product < ActiveRecord::Base
      self.primary_key = "product_id"
    end

5 CRUD: Reading and Writing Data
  CRUD is an acronym for the four verbs we use to operate on data: Create, Read, Update and Delete.  Active Record automatically creates methods to allow an application to read and manipulate data stored within its tables.

  5.1 Create
  Active Record objects can be created from a hash, a block or have their attributes manually set after creation.  The new method will return a new object while create will return the object and save it to the database.

  For example, given a model User with attributes of name and occupation, the create method call will create and save a new record into the database:

    user = User.create( name: "David", occupation: "Code Artist")

  Using the new method, an object can be instantiated without being saved:

    user = User.new
    user.name = "David"
    user.occupation = "Code Artist"

  A call to user.save will commmit the record to the database.

  Finally, if a block is provided, both create and new will yield the new object to that block for initializaiton:

    user = User.new do |u|
      u.name = "David"
      u.occupation = "Code Artist"
    end

  5.2 Read
  Active Record provides a rich API for accessing data within a database.  Below are a few examples of different data access methods provided by Active Record.

    # return a collection with all users
    users = User.all
  
    # return the first user
    user = User.first
  
    # return the first user named David
    david = User.find_by(name: 'David')
  
    # find all users named David who are Code Artists and sort by created_at
    # in reverse chronological order
    users = User.where(name: 'David', occupation: 'Code Artist').order('created_at DESC')

  You can learn more about querying an Active Record model in the Active Record Query Interface guide.

  5.3 Update
  Once an Active Record object has been retrieved, its attributes can be modified and it can be saved to the database.

    user = User.find_by(name: 'David')
    user.name = 'Dave'
    user.save

  A shorthand for this is to use a hash mapping attribute names to the desired value, like so:

    user = User.find_by(name: 'David')
    user.update(name: 'Dave')

  This is most useful when updating several attributes at once.  If, on the other hand, you'd like to update several records in bulk, you may find the update_all class method useful:

    User.update_all "max_login_attempts = 3, must_change_password = 'true'"

  5.4 Delete
  Likewise, once retrieved an Active Record object can be destroyed which removes it from the database.

    user = User.find_by(name: 'David')
    user.destroy

6. Validations
  Active Record allows you to validate the state of a model before it gets written into the database.  There are several methods that you can use to check your models and validate that an attribute value is not empty, is unique and not already in the database, follows a specific format and many more.

  Validation is a very important issue to consider when persisting to database, so the methods create, save and update take it into account when running: they return false when validation fails and they didn't actually perform any operation on database.  All of these have a bang counterpart (that is, create!, save! and update!), which are stricter in that they raise the exception ActiveRecord::RecordInvalid if validation fails.  A quick example to illustrate:

    class User < ActiveRecord::Base
      validates :name, presence: true
    end

    User.create  # => false
    User.create! # => ActiveRecord::RecordInvalid: Validation failed: Name can't be blank

  You can learn more about validations in the Active Record validations Guide

7.  Callbacks
  Active Record callbacks allow you to attach code to certain events in the life-cycle of your models.  This enables you to add behavior to your models by transparently executing code when those events occur, like when you create a new record, update it, destroy it and so on.  you can learn more about callbacks in the Active Record Callbacks guide.

8. Migrations
  Rails provides a domain-specific langauge for managing a database schema called migrations.  Migrations are stored in files which are executed against any database that Active Record supports using rake.  Here's a migration that creates a table:

    class CreatePublications < ActiveRecord::Migration
      def change
        create_table :publications do |t|
          t.string :title
          t.text :description
          t.references :publication_type
          t.integer :publisher_id
          t.string :publisher_type
          t.boolean :single_issue
  
          t.timestamps
        end
        add_index :publications, :publication_type_id
      end
    end

  Rails keeps track of which files have been committed to the database and provides rollback features.  To actually create the table, you'd run rake db:migrate and to roll it back, rake db:rollback

  Note that the above code is database-agnostic: it will run in MySQL, PostgrSQL, Oracle and others.  You can learn more about migrations in the Active Record Migrations guide.
#END http://guides.rubyonrails.org/active_record_basics.html EOF

#BEGIN http://guides.rubyonrails.org/migrations.html
1. Migration Overview
  Migrations are a convenient way to alter your database schema over time in a consistent and easy way.  They use a Ruby DSL so that you don't have to write SQL by hand, allowing your schema and changes to be database independent.

  You can think of each migration as being a new 'version' of the database.  A schema starts off with nothing in it, and each migration modifies it to add or remove tables, columns, or entries.  Active Record knows how to update your schema along this timeline, bringing it from whatever point it is in the history to the latest version.  Active Record will also update your db/schema.rb file to match the up-to-date structure of your database.

  Here's an example of a migration:

    class CreateProducts < ActiveRecord::Migration
      def change
        create_table :products do |t|
          t.string :name
          t.text :description

          t.timestamps
        end
      end
    end

  This migration adds a table called products with a string column called name and a text column called description.  A primary key column called id will also be added implicitly, as it's the default primary key for all Active Record models.  The timestamps macro adds two columns, created_at and updated_at.  These special columns are automatically managed by Active Record if they exist.

  Note that we define the change that we want to happen moving forward in time.  Before this migration is run, there will be no table.  After, the table will exist.  Active Record knows how to reverse this migration as well: if we roll this migration back, it will remove the table.

  On databases that support transactions with statements that change the schema, migrations are wrapped in a transaciton.  If the database does not support this then when a migration fails the parts of it that succeeded will not be rolled back.  You will have to rollback the changes that were made by hand.

  There are certain queries that can't be run inside a transaction.  If your adapter supports DDL transactions you can use disable_ddl_transaction! to disable them for a single migration.

  If you wish for a migration to do something that Active Record doesn't know how to reverse, you can use reversible:

    class ChangeProductsPrice < Active Record::Migration
      def change
        reversible do |dir|
          change_table :products do |t|
            dir.up   { t.change :price, :string }
            dir.down { t.change :price, :integer }
          end
        end
      end
    end

  Alternatively, you can use up and down instead of change:

    class ChangeProductsPrice < ActiveRecord::Migration
      def up
        change_table :products do |t|
          t.change :price, :string
        end
      end

      def down
        change_table :products do |t|
          t.change :price, :integer
        end
      end
    end

2. Creating a Migration
  2.1 Creating a Standalone Migration
  Migrations are stored as files in the db/migrate directory, one for each migration class.  The name of the file is of the form YYYYMMDDHHSS_create_products.rb, that is to say a UTC timestamp identifying the migration followed by an underscore follwed by the name of the migration.  The name of the migration class (CameCased version) should match the latter part of the file name.  For example 20080906120001_add_details_to_products.rb should define AddDetailsToProducts.  Rails uses this timestamp to determine which migration should be run and in what order, so if you're copying a migration from another application or generate a file yourself, be aware of its position in the order.

  Of course, calculating timestamps is no fun, so Active Record provides a generator to handle making it for you:

    $ bin/rails generate migration AddPartNumberToProducts

  This will create an empty but appropriately named migration:

    class AddPartNumberToProducts < ActiveRecord::Migration
      def change
      end
    end

  If the migration name is of the form "AddXXXToYYY" or "RemoveXXXFromYYY" and is followed by a list of column names and types then a migration containing the appropriate add_column and remove_column statements will be created.

    $ bin/rails generate migration AddPartNumberToProducts part_number:string

  will generate

    class AddPartNumberToProducts < ActiveRecord::Migration
      def change
        add_column :products, :part_number, :string
      end
    end

  If you'd like to add an index on the new colun, you can do that as well:

    $ bin/rails generate migration AddPartNumberToProducts part_number:string:index

  will generate

    class AddPartNumberToProducts < ActiveRecord::Migration
      def change
        add_column :products, :part_number, :string
        add_index :products, :part_number
      end
    end

  Similarly, you can generate a migration to remove a column from the command line:

    $ bin/rails generate migration RemovePartNumberFromProducts part_number:string

  generates

    class RemovePartNumberFromProducts < ActiveRecord::Migration
      def change
        remove_column :products, :part_number, :string
      end
    end

  You are not limited to one magically generated column.  For example:

    $ bin/rails generate migration AddDetailsToProducts part_number:string price:decimal

  generates

    class AddDetailsToProducts < ActiveRecord::Migration
      def change
        add_column :products, :part_number, :string
        add_column :products, :price, :decimal
      end
    end

  If the migration name is of the form "CreateXXX" and is followed by alist of column names and types then a migration creating the table XXX with the columns listed will be generated.  For example:

    $ bin/rails generate migration CreateProducts name:string part_number:string

  generates

    class CreateProducts < ActiveRecord::Migration
      def change
        create_table :products do |t|
          t.string :name
          t.string :part_number
        end
      end
    end

  As always, what has been generated for you is just a starting point.  You can add or remove from it as you see fit by editing the db/migrate/YYYYMMDDHHMMSS_add_details_to_products.rb file.

  Also, the generator accepts column type as references (also available as belongs_to).  For instance:

    $ bin/rails generate migration AddUserRefToProducts user:references

  generates

    class AddUserRefToProducts < ActiveRecord::Migration
      def change
        add_reference :products, :user, index: true
      end
    end

  This migration will create a user_id column and appropriate index.

  There is also a generator which will produce join tables if JoinTable is part of the name:

    $ bin/rails g migraiton CreateJoinTableCustomerProduct customer product

  will produce the following migraiton:

    class CreateJoinTableCustomerProduct < ActiveRecord::Migration
      def change
        create_join_table :customers, :products do |t|
          # t.index [:customer_id, :product_id]
          # t.index [:product_id, :customer_id]
        end
      end
    end

  2.2 Model Generators
  The model and scaffold generators will create migrations appropriate for adding a new model.  This migration will already contaain instructions for creating the relevant table.  If you tell Rails what columns you want, then statements for adding these columns will also be created.  For exampel, running:

    $ bin/rails generate model Product name:string description:text

  will create a migration that looks like this

    class CreateProducts < ActiveRecord::Migration
      def change
        crate_table :products do |t|
          t.string :name
          t.text :description

          t.timestamps
        end
      end
    end

  You can append as many column name/type pairs as you want.

  2.3 Passing Modifiers
  Some commonly used type modifiers can be passed directly on the command line.  They are enclosed by curly braces and follow the field type:

  For instance, running

    $ bin/rails generate migration AddDetailsToProducts 'price:decimal{5,2}' supplier:references{polymorphic}

  will produce a migration that looks like this

    class AddDetailsToProducts < ActiveRecord::Migration
      def change
        add_column :products, :price, :decimal, precision: 5, scale: 2
        add_reference :products, :supplier, polymorphic: true, index: true
      end
    end

  Have a look at the generators help output for further details

#END http://guides.rubyonrails.org/migrations.html

Chapter 7. Task B: Validation and Unit Testing
Iteration B2: Unit Testing of Models

One of the things about Rails framework is that it has support for testing baked right in from the start of every project.

See the test/models/product_test.rb model: The generated ProductTest is a subclass of ActiveSupport::TestCase.  The fact that ActiveSupport::TestCase is a subclass of the MiniTest::Unit::TestCase class tells us that Rails generates tests based on the MiniTest framework that comes preinstalled with Ruby.

Inside this test case, Rails generated a single commented-out test called "the truth".

The test..do syntax may seem surprising at first, but here Active Support is combining a class method, optional parentheses, and a block to make defining a test method just the tiniest bit simpler for you.  Sometimes it is the little things that make all the difference.

The assert line in this method is an actual test.

To run the tests for the models:
  $ bin/rake test:modelss

Test Fixtures
In the world of testing, a fixture is an environment in which you can run a test.  You specify fixture data in files in the test/fixtures directory.  These files are YAML files.

The fixture names are used in the generated integration tests.

By convention Rails will load the fixture file with the same name as the model, but you can control which fixtures to load by specifying it in the test files as

  class ProductTest < ActiveSupport::TestCase
    fixtures :products
    #...
  end

The fixtures() directive loads the fixture data corresponding to the given model name into the corresponding database table before each test method in the test case is run.  The name of the fixture file determines the table that is loaded, so using :products will cause the products.yml fixture file to be used.

To put it another way, in the case of our ProductTest class, adding the fixtures directive means that the products table will be emptied out and then populated with the three rows defined in the fixutre before each test method is run.

db/development.sqlite3 will be our development database
db/test.sqlite3 is the production database
db/production.sqlite3 is the production database

Each test method gets a freshly initialized table in the test database, loaded from the fixtures we provide.  This is automatically done by the rake test command but can be done separately by running rake db:test:prepare.

Using Fizture Data
Each fixture Rails loads into a test, it defines a method with the same name as the fixture.  You can use this method to access preloaded model objects containing the fixture data: simply pass it the name of the row as defined in the YAML fixture file, and it'll return a model object containing that row's data.

In the case of our product data, calling products(:ruby) returns a Product model containing the data we defined in the fixture.  Let's use that to test the validation of unique product titles.

  products(:ruby).title -> "Programming Ruby 1.9"

What We Just Did
In just about a dozen lines of code, we augmented that generated code with validation.

  * We ensured that required fields were present.
  * We ensured that price fields were numeric and at least one cent.
  * We ensured that titles were unique.
  * We ensured that images matched a given format.
  * We updated the unit tests that Rails provided, both to conform to the constraints we have imposed on the model and to verify the new code we added.

Play Time
  *  If you are using Git, now might be a good time to commit the work.

  *  The validation option :length checks the length of a model attribute.  Add validation to the Product model to check that the title is at least ten characters long.
  *  Change the error message associated with one of your validations.

