#BEGIN http://guides.rubyonrails.org/migrations.html

4 Running Migrations
Rails provides a set of Rake tasks to run certain sets of migrations

The very first migration related Rake task you will use will probably be rake db:migrate in its most basic form it just runs the change or up method for all the migrations that have not yet been run.  If there are no such migrations, it exits.  It will run these migrations in order based on the date of the migration.

Note that running the db:migrate task also invokes the db:schema:dump task, which will update your db/schema.rb file to match the structure of your database.

If you specify a target version, Active Record will run the required migrations (change, up, down) unitl it has reached the specified version.  The version is the numerical prefix on the migraiton's filename.  For example, to migrate to version 20080906120000 run

  $ bin/rake db:migrate VERSION=20080906120000

If version 20080906120000 is greater than the current version (i.e., it is migrating upwards), this will run the change (or up) method on all migrations up to and including 2008009061200, and will not execute any later migrations.  If migrating downwards, this will run the down method on all the migrations down to, but not including, 20080906120000.

4.1 Rolling Back
A common task is to rollback the last migration.  For example, if you made a mistake in it and wish to correct it.  Rather than tracking down the version number associated with the previous migration you can run:

  $ bin/rake db:rollback

This will rollback the latest migration, either by reverting the change method or by running the down method.  If you need to undo several migrations you can provide a STEP parameter.

  $ bin/rake db:rollback STEP=3

will revert the last 3 migrations.

The db:migrate:redo task is a shortcut for doing a rollback and then migrating back up again.  As with the db:rollback task, you can use the STEP parameter if you need to go more than one version back, for example:

  $ bin/rake db:migrate:redo STEP=3

Neither of these Rake tasks do anything you could not do with db:migrate.  They are simply more convenient, since you do not need to explicitly specify the version to migrate to.

4.2 Setup the Database
The rake db:setup task will create the database, load the schema and initialize it with the seed data.

4.3 Resetting the Database
The rake db:reset task will drop the database and set it up again.  This is functionally equivalent to rake db:drop db:setup

NOTE
This is not the same as running all the migrations.  It will only use the contents of the current schema.rb file.  If a migration can't be rolled back, rake db:reset may not help you.

4.4 Running Specific Migrations
If you need to run a specific migration up or down, the db:migrate:up and db:migrate:down tasks will do that.  Just specify the appropriate version and the corresponding migration will have its change,up or down method invoked, for example:

  $ bin/rake db:migrate:up VERSION=20080906120000

will run the 20080906120000 migration by running the change method (or the up method).  This task will first check whether the migration is already performed and will do nothing if Active Record believes that it has already been run.

4.5 Running Migrations in Different Environments
By default running rake db:migrate will run in the development environment.  To run migrations against another environment you can specify it using the RAILS_ENV environment variable while running the command. For example to run migrations against the test environment you could run:

  $ bin/rake db:migrate RAILS_ENV=test

4.6 Changing the Output of Running Migrations
By default migrations tell you exactly what they're doing and how long it took.  A migration creating a table and adding an index might produce output like this

  ==  CreateProducts: migrating
  =================================================
  -- create_table(:products)
     -> 0.0028s
  ==  CreateProducts: migrated (0.0028s)
  ========================================

Several methods are provided in migrations that allow you to control all this:

  suppress_messages  - Takes a block as an argument and suppresses any output generated by the block.
  say                - Takes a message argument and outputs it as is.  A second boolean argument can be passed to specify whether to indent or not.
  say_with_time      - Outputs text along with how long it took to run its block.  If the block returns an integer it assumes it is the number of rows affected.

For example, this migration:

  class CreateProducts < ActiveRecord::Migration
    def change 
      suppress_messages do
        create_table :products do |t|
          t.string :name
          t.text :description
          t.timestamps
        end
      end
  
      say "Created a table"
  
      suppress_messages {add_index :products, :name}
      say "and an index!", true
  
      say_with_time 'Waiting for a while' do
        sleep 10
        250
      end
    end
  end

generates the following output

  --  CreateProducts: migrating
  =============================================
  -- created a table
     -> and an index!
  -- Waiting for a while
     -> 10.0013s
     -> 250 rows
  ==  CreateProducts: migrated (10.0054s)
  =======================================

If you want Active Record to not ouput anything, then running rake db:migrate VERBOSE=false will suppress all output.

5 Changing Existing Migrations
Occasionally you will make a mistake when writing a migration.  If you have already run the migration then you cannot just edit the migration and run the migration again: Rails thinks it has already run the migration and so will do nothing when you run rake db:migrate.  You must rollback the migration (for example with rake db:rollback), edit your migration and then run rake db:migrate to run the corrected version.

In general, editing existing migrations is not a good idea.  You will be creating extra work for yourself and your co-workers and cause major headaches if the existing version of the migration has already been run on production machines.  Instead, you should write a new  migration that performs the changes you require.  Editing a freshly generated migration that has not yet been committed to source control (or, more generally, which has not been propagated beyond your development machine) is relatively harmless.

The revert method can be helpful when writing a new migration to undo previous migrations in whole or in part.

6 Using Models in Your Migrations
When creating or updating data in a migration it is often tempting to use one of your models.  After all, they exist to provide easy access to the underlying data.  This can be done, but some caution should be observed.

For example, problems occur when the model uses database columns which are (1) not currently in the database and (2) will be created by this or a subsequent migration.

Consider this example, where Alice and Bob are working on the same code base which contains a Product model:

Bob goes on vacation.

Alice creates a migration for the products table which adds a new column and initializes it:

  # db/migrate/20100513121110_add_flag_to_product.rb
  
  class AddFlagToProduct < ActiveRecord::Migration
    def change
      add_column :products, :flag, :boolean
      reversible do |dir|
        dir.up { Product.update_all flag: flase }
      end
    end
  end

She also adds a vaildation to the product model for the new column:

  # app/models/product.rb

  class Product < ActiveRecord::Base
    validates :flag, inclusion: { in: [true, false] }
  end

Alice adds a second migration which adds another column to the products table and initializes it:

  # db/migrate/20100515121110_add_fuzz_to_product.rb

  class AddFuzzToProduct < ActiveRecord::Migration
    def change
      add_column :products, :fuzz, :string
      reversible do |dir|
        dir.up { Product.update_all fuzz: 'fuzzy' }
      end
    end
  end

She also adds a validation to the Product model for the new column:

  # app/models/product.rb

  class Product < ActiveRecord::Base
    validates :flag, inclusion: { in: [true, false] }
    validates :fuzz, presence: true
  end

Both migrations work for Alice.

Bob comes back from vaction and:

  * Updates the source -which contains both migrations and the latest version of the Product model.
  * Runs outstanding migrations with rake db:migrate, which includes the one that updates the Product model.

The migration crashes because when the model attempts to save, it tries to validate the second column added column, which is not in the database when the first migraiton runs:

  rake aborted!
  An error has occurred, this and all later migrations canceled:

  undefined method `fuzz' for #<Product:0x0000001049b14a0>

A fix for this is to create a local model within the migration.  This keeps Rails from running the validations, so that the migraitons run to completion.

When using a local model, it's a good idea to call Product.reset_column_information to refresh the Active Record cache for the Product model prior to updating data in the database.

If Alice had done this instead, there would have been no problem:

  # db/migrate/20100513121110_add_flag_to_product.rb
  
  class AddFlagToProduct < ActiveRecord::Migration
    class Product < ActiveRecord::Base
    end

    def change
      add_column :products, :flag, :boolean
      Product.reset_column_information
      reversible do |dir|
        dir.up { Product.update_all flag: false }
      end
    end
  end

  # db/migrate/20100515121110_add_fuzz_to_product.rb

  class AddFuzzToProduct < ActiveRecord::Migration
    class Product < ActiveRecord::Base
    end

    def change
      add_column :products, :fuzz, :string
      Product.reset_column_information
      reversible do |dir|
        dir.up { Product.update_all fuzz: 'fuzzy' }
      end
    end
  end

There are other ways in which the above example coul have gone badly.

For example, imagine that Alice creates a migration that selectively updates the description field on certain products.  She runs the migration, commits the code, and then begins working on the next feature, which is to add a new column fuzz to the products table.

She creates two migrations for this new feature, one which adds the new column, and a second which selectively updates the fuzz column based on other product attributes.

These migrations run just fine, but when Bob comes back from his vacation and calls rake db:migrate to run all the outstanding migraitons, he gets a subtle bug: The descriptions have defaults, and the fuzz column is present, but fuzz is nil on all products.

The solution is again to use Product.reset_column_information before referencing the Product model in a migration, ensuring the Active Record's knowledge of the table structure is current before manipulating data in those records.

7 Schema Dumping and You

7.1 What are Schema Files for?
Migrations mighty as they may be, are not the authoritative source for your database schema.  That role falls to either db/schema.rb or an SQL file which Active Record generates by examining the database.  They are not designed to be edited, they just represent the current state of the database.

There is no need (and it is error prone) to deploy a new instance of an app by replaying the entire migration history.  It is much simpler and faster to just load into the database a description of the current schema.

For example, this is how the test database is created: the current development database is dumped (either to db/schema.rb or db/structure.sql) and then loaded into the test database.

Schema files are also useful if you want a quick look at what attributes an Active Record object has.  This information is not in the model's code and is frequently spread across several migraitons, but the information is nicely summed up in the schema file.  The annote_models gem automatically adds and updates comments at the top of each model summarizing the schema if you desire that functionality.

7.2 Types of Schema Dumps
There are two ways to dump the schema.  This is set in config/application.rb by the config.active_record.schema_format setting, which may be either :sql or :ruby.

If :ruby is selected then the schema is stored in db/schema.rb.  If you look at this file you'll find that it looks an awful lot like one very big migration:

  ActiveRecord::Schema.define(version: 20080906171750) do
    create_table "authors", force: true do |t|
      t.string   "name"
      t.datetime "created_at"
      t.datetime "updated_at"
    end

    create_table "products", force: true do |t|
      t.string   "name"
      t.text "description"
      t.datetime "created_at"
      t.datetime "updated_at"
      t.string "part_number"
    end
  end

In many ways this is exactly what it is.  This file is created by inspecting the database and expressing its structure using create_table, add_index, and so on.  Because this is database-independent, it could be loaded into any database that Active Record supports.  This could be very useful if you were to distribute an application that is able to run against multiple databases.

There is however a trade-off: db/schema.rb cannot express database specific items such as foreign key constraints, triggers, or stored procedures.  While in a migration you can execute  custom SQL statements, the schema dumper cannot reconstitute those statemnts from the database.  If you are using features like this, then you should set the schema format to :sql.

Instead of using Active Record's schema dumper, the database's structure will be dumped using a tool specific to the database (via the db:structure:dump Rake task) into db/structure.sql.  For example, for PostgreSQL, the pg_dump utility is used.  For MySQL, this file will contain the output of SHOW CREATE TABLE for the various tables.

Loading these schemas is simply a quesiton of executing the SQL statements they contain.  By definition, this will create a perfect copy of the database's structure.  Using the :sql schema format will, however, prevent loading the schema into a RDBMS other than the one used to create it.

7.3 Schema Dumps and Source Control
Because schema dumps are the authoritative source for your database schema,it is strongly recommended that you check them into source control.

8 Active Record and Referntial Integrity
The Active Record way claims that intelligence belongs in your models, not in the database.  As such, features such as triggers or foreign key constraints, which push some of that intelligence back into the database, are not heavily used.

Validations such as validates :foreign_key, uniqueness: true are one way in which models can enforce data integrity.  The :dependent option on associations allows models to automatically destroy child objects when the parent is destroyed.  Like anything which operates at the application level, these cannot guarantee referential integrity and so some people augment them with foreign key constraints in the database.

Although Active Record does not provide any tools for working directly with such features, the execute method can be used to execute arbitrary SQL.  you can also use a gem like foreigner which adds foreign key support to Active Record (including support for dumping foreign keys in db/schema.rb).

9 Migrations and Seed Data
Some people use migraitons to add data to the database:

  class AddInitialProducts < ActiveRecord::Migraiton
    def up
      5.times do |i|
        Product.create(name: "Product ##{i}", description: "A product.")
      end
    end

    def down
      Product.delete_all
    end
  end

However, Rails has a 'seeds' feature that should be used for seedinga database with initial data.  It's a really simple feature: just fill up db/seeds.rb with some Ruby code, and run rake db:seed:

  5.times do |i|
    Product.create(name: "Product ##{i}", description: "A product.")
  end

This is generally a much cleaner way to set up the database of a blank application.

#END http://guides.rubyonrails.org/migrations.html EOF
